=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::AccountsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'AccountsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::AccountsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AccountsApi' do
    it 'should create an instact of AccountsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::AccountsApi)
    end
  end

  # unit tests for create
  # Creates new accounts.
  # Creates new DocuSign service accounts.  This is used to create multiple DocuSign accounts with one call. It uses the same information and formats as the normal a  [Accounts:create](accounts_create) call with the information included within a &#x60;newAccountRequests&#x60; element. A maximum of 100 new accounts can be created at one time.  Note that the structure of the XML request is slightly different than the JSON request, in that the new account information is included in a &#x60;newAccountDefinition&#x60; property inside the &#x60;newAccountRequests&#x60; element. Response  The response returns the new account ID, password and the default user information for each newly created account.  A 201 code is returned if the call succeeded.  While the call may have succeed, some of the individual account requests may have failed. In the case of failures to create the account,  an &#x60;errorDetails&#x60; node is added in the response to each specific request that failed.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :preview_billing_plan When set to **true**, creates the account using a preview billing plan.
  # @option opts [NewAccountDefinition] :new_account_definition 
  # @return [NewAccountSummary]
  describe 'create test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_brand
  # Creates one or more brand profile files for the account.
  # Creates one or more brand profile files for the account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSig&#x60;) must be set to **true** for the account to use this call.  An error is returned if &#x60;brandId&#x60; property for a brand profile is already set for the account. To upload a new version of an existing brand profile, you must delete the profile and then upload the newer version.  When brand profile files are being uploaded, they must be combined into one zip file and the &#x60;Content-Type&#x60; must be &#x60;application/zip&#x60;.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [Brand] :brand 
  # @return [BrandsResponse]
  describe 'create_brand test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_e_mortgage_transaction
  # Starts a new eMortgage Transaction
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [PostTransactionsRequest] :post_transactions_request 
  # @return [PostTransactionsResponse]
  describe 'create_e_mortgage_transaction test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_permission_profile
  # Creates a new permission profile in the specified account.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :include 
  # @option opts [PermissionProfile] :permission_profile 
  # @return [PermissionProfile]
  describe 'create_permission_profile test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete
  # Deletes the specified account.
  # This closes the specified account. You must be an account admin to close your account. Once closed, an account must be reopened by DocuSign.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_brand
  # Removes a brand.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param brand_id The unique identifier of a brand.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_brand test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_brand_logo_by_type
  # Delete one branding logo.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param brand_id The unique identifier of a brand.
  # @param logo_type One of **Primary**, **Secondary** or **Email**.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_brand_logo_by_type test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_brands
  # Deletes one or more brand profiles.
  # Deletes one or more brand profiles from an account. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;) must be set to **true** to use this call.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [BrandsRequest] :brands_request 
  # @return [BrandsResponse]
  describe 'delete_brands test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_captive_recipient
  # Deletes the signature for one or more captive recipient records.
  # Deletes the signature for one or more captive recipient records; it is primarily used for testing. This provides a way to reset the signature associated with a client user ID so that a new signature can be created the next time the client user ID is used.
  # @param account_id The external account number (int) or account ID Guid.
  # @param recipient_part 
  # @param [Hash] opts the optional parameters
  # @option opts [CaptiveRecipientInformation] :captive_recipient_information 
  # @return [CaptiveRecipientInformation]
  describe 'delete_captive_recipient test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_e_note_configuration
  # Deletes configuration information for the eNote eOriginal integration.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_e_note_configuration test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_permission_profile
  # Deletes a permissions profile within the specified account.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param permission_profile_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_permission_profile test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_information
  # Retrieves the account information for the specified account.
  # Retrieves the account information for the specified account.  **Response** The &#x60;canUpgrade&#x60; property contains is a Boolean that indicates whether the account can be upgraded through the API. 
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :include_account_settings When set to **true**, includes the account settings for the account in the response.
  # @return [AccountInformation]
  describe 'get_account_information test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_tab_settings
  # Returns tab settings list for specified account
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @return [TabAccountSettings]
  describe 'get_account_tab_settings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_billing_charges
  # Gets list of recurring and usage charges for the account.
  # Retrieves the list of recurring and usage charges for the account. This can be used to determine the charge structure and usage of charge plan items.   Privileges required: account administrator 
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :include_charges Specifies which billing charges to return. Valid values are:  * envelopes * seats 
  # @return [BillingChargeResponse]
  describe 'get_billing_charges test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_brand
  # Get information for a specific brand.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param brand_id The unique identifier of a brand.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :include_external_references 
  # @option opts [String] :include_logos 
  # @return [Brand]
  describe 'get_brand test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_brand_logo_by_type
  # Obtains the specified image for a brand.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param brand_id The unique identifier of a brand.
  # @param logo_type One of **Primary**, **Secondary** or **Email**.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'get_brand_logo_by_type test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_brand_resources
  # Returns the specified account&#39;s list of branding resources (metadata).
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param brand_id The unique identifier of a brand.
  # @param [Hash] opts the optional parameters
  # @return [BrandResourcesList]
  describe 'get_brand_resources test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_brand_resources_by_content_type
  # Returns the specified branding resource file.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param brand_id The unique identifier of a brand.
  # @param resource_content_type 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :langcode 
  # @option opts [String] :return_master 
  # @return [nil]
  describe 'get_brand_resources_by_content_type test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_consumer_disclosure
  # Gets the Electronic Record and Signature Disclosure.
  # Retrieves the Electronic Record and Signature Disclosure, with HTML formatting, for the requested envelope recipient. This might be different than the current account disclosure depending on account settings, such as branding, and when the account disclosure was last updated. An optional query string can be included to return the language for the disclosure.  
  # @param account_id The external account number (int) or account ID Guid.
  # @param lang_code The simple type enumeration the language used in the response. The supported languages, with the language value shown in parenthesis, are:Arabic (ar), Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Bahasa Indonesia (id), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Bahasa Melayu (ms), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro), Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk) and Vietnamese (vi). Additionally, the value can be set to �browser� to automatically detect the browser language being used by the viewer and display the disclosure in that language.
  # @param [Hash] opts the optional parameters
  # @return [ConsumerDisclosure]
  describe 'get_consumer_disclosure test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_consumer_disclosure_default
  # Gets the Electronic Record and Signature Disclosure for the account.
  # Retrieves the Electronic Record and Signature Disclosure, with HTML formatting, associated with the account. You can use an optional query string to set the language for the disclosure.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :lang_code Specifies the language used in the response. The supported languages, with the language value shown in parenthesis, are: Arabic (ar), Bulgarian (bg), Czech (cs), Chinese Simplified (zh_CN), Chinese Traditional (zh_TW), Croatian (hr), Danish (da), Dutch (nl), English US (en), English UK (en_GB), Estonian (et), Farsi (fa), Finnish (fi), French (fr), French Canada (fr_CA), German (de), Greek (el), Hebrew (he), Hindi (hi), Hungarian (hu), Bahasa Indonesia (id), Italian (it), Japanese (ja), Korean (ko), Latvian (lv), Lithuanian (lt), Bahasa Melayu (ms), Norwegian (no), Polish (pl), Portuguese (pt), Portuguese Brazil (pt_BR), Romanian (ro), Russian (ru), Serbian (sr), Slovak (sk), Slovenian (sl), Spanish (es),Spanish Latin America (es_MX), Swedish (sv), Thai (th), Turkish (tr), Ukrainian (uk), and Vietnamese (vi).  Additionally, the value can be set to &#x60;browser&#x60; to automatically detect the browser language being used by the viewer and display the disclosure in that language. 
  # @return [ConsumerDisclosure]
  describe 'get_consumer_disclosure_default test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_e_note_configuration
  # Returns the configuration information for the eNote eOriginal integration.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @return [ENoteConfiguration]
  describe 'get_e_note_configuration test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_permission_profile
  # Returns a permissions profile in the specified account.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param permission_profile_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :include 
  # @return [PermissionProfile]
  describe 'get_permission_profile test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_provisioning
  # Retrieves the account provisioning information for the account.
  # Retrieves the account provisioning information for the account.
  # @param [Hash] opts the optional parameters
  # @return [ProvisioningInformation]
  describe 'get_provisioning test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_brands
  # Gets a list of brand profiles.
  # Retrieves the list of brand profiles associated with the account and the default brand profiles. The Account Branding feature (accountSettings properties &#x60;canSelfBrandSend&#x60; and &#x60;canSelfBrandSend&#x60;)  must be set to **true** for the account to use this call.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :exclude_distributor_brand When set to **true**, excludes distributor brand information from the response set.
  # @option opts [String] :include_logos When set to **true**, returns the logos associated with the brand.
  # @return [BrandsResponse]
  describe 'list_brands test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_custom_fields
  # Gets a list of custom fields associated with the account.
  # Retrieves a list of envelope custom fields associated with the account. You can use these fields in the envelopes for your account to record information about the envelope, help search for envelopes and track information. The envelope custom fields are shown in the Envelope Settings section when a user is creating an envelope in the DocuSign member console. The envelope custom fields are not seen by the envelope recipients.  There are two types of envelope custom fields, text, and list. A text custom field lets the sender enter the value for the field. The list custom field lets the sender select the value of the field from a list you provide.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @return [CustomFields]
  describe 'list_custom_fields test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_permissions
  # Gets a list of permission profiles.
  # Retrieves a list of Permission Profiles. Permission Profiles are a standard set of user permissions that you can apply to individual users or users in a Group. This makes it easier to manage user permissions for a large number of users, without having to change permissions on a user-by-user basis.  Currently, Permission Profiles can only be created and modified in the DocuSign console.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :include 
  # @return [PermissionProfileInformation]
  describe 'list_permissions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_recipient_names_by_email
  # Gets recipient names associated with an email address.
  # Retrieves a list of recipients in the specified account that are associated with a email address supplied in the query string.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :email The email address for the user
  # @return [RecipientNamesResponse]
  describe 'list_recipient_names_by_email test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_settings
  # Gets account settings information.
  # Retrieves the account settings information for the specified account.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @return [AccountSettingsInformation]
  describe 'list_settings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_shared_access
  # Reserved: Gets the shared item status for one or more users.
  # Reserved: Retrieves shared item status for one or more users and types of items.  Users with account administration privileges can retrieve shared access information for all account users. Users without account administrator privileges can only retrieve shared access information for themselves and the returned information is limited to the retrieving the status of all members of the account that are sharing their folders to the user. This is equivalent to setting the shared&#x3D;shared_from.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :count Specifies maximum number of results included in the response. If no value is specified, this defaults to 1000.
  # @option opts [String] :envelopes_not_shared_user_status 
  # @option opts [String] :folder_ids 
  # @option opts [String] :item_type Specifies the type of shared item being requested. The accepted values are: -envelopes: returns information about envelope sharing between users.
  # @option opts [String] :search_text This can be used to filter user names in the response. The wild-card ‘*’ (asterisk) can be used around the string.
  # @option opts [String] :shared Specifies which users should be included in the response. Multiple values can be used in the query by using a comma separated list of shared values. If the requestor does not have account administrator privileges, the shared_to value is used. Requestors that do not have account administrator privileges can only use the shared_to, any other setting will result in an error. The accepted values are:  -not_shared: Returns account users that the specified item type is not being shared with and that are not sharing the specified item type with the user.  User X (Share) X Account user  -shared_to: Returns account users that the specified item type is not being shared with and who are sharing the specified item type with the user (only shared to the user).  User X (Share) Account user  -shared_from: Returns account users that the specified item type is being shared with and who are not sharing the specified item type with the user (only shared from the user).  User (Share) &gt;&gt; Account user  -shared_to_and_from: Returns account users that the specified item type is being shared with and who are sharing the specified item type with the user.  User &lt;&lt; (Share) &gt;&gt; Account user
  # @option opts [String] :start_position If the response set exceeds Count, this can be used to specify that the method should return users starting at the specified index. The first index is 0, and should be used in the first GET call. Typically this number is a multiple of Count. If no value is specified, this defaults to be 0. 
  # @option opts [String] :user_ids A comma separated list of userIds for whom the shared item information is being requested. 
  # @return [AccountSharedAccess]
  describe 'list_shared_access test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_signature_providers
  # Returns Account available signature providers for specified account.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @return [AccountSignatureProviders]
  describe 'list_signature_providers test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_unsupported_file_types
  # Gets a list of unsupported file types.
  # Retrieves a list of file types (mime-types and file-extensions) that are not supported for upload through the DocuSign system.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @return [FileTypeList]
  describe 'list_unsupported_file_types test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_account_tab_settings
  # Modifies tab settings for specified account
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [TabAccountSettings] :tab_account_settings 
  # @return [TabAccountSettings]
  describe 'update_account_tab_settings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_brand
  # Updates an existing brand.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param brand_id The unique identifier of a brand.
  # @param [Hash] opts the optional parameters
  # @option opts [Brand] :brand 
  # @return [Brand]
  describe 'update_brand test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_brand_logo_by_type
  # Put one branding logo.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param brand_id The unique identifier of a brand.
  # @param logo_type One of **Primary**, **Secondary** or **Email**.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'update_brand_logo_by_type test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_brand_resources_by_content_type
  # Uploads a branding resource file.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param brand_id The unique identifier of a brand.
  # @param resource_content_type 
  # @param [Hash] opts the optional parameters
  # @return [BrandResources]
  describe 'update_brand_resources_by_content_type test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_e_note_configuration
  # Updates configuration information for the eNote eOriginal integration.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [ENoteConfiguration] :e_note_configuration 
  # @return [ENoteConfiguration]
  describe 'update_e_note_configuration test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_permission_profile
  # Updates a permission profile within the specified account.
  # 
  # @param account_id The external account number (int) or account ID Guid.
  # @param permission_profile_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :include 
  # @option opts [PermissionProfile] :permission_profile 
  # @return [PermissionProfile]
  describe 'update_permission_profile test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_settings
  # Updates the account settings for an account.
  # Updates the account settings for the specified account.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [AccountSettingsInformation] :account_settings_information 
  # @return [nil]
  describe 'update_settings test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_shared_access
  # Reserved: Sets the shared access information for users.
  # Reserved: Sets the shared access information for one or more users.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :item_type 
  # @option opts [String] :user_ids 
  # @option opts [AccountSharedAccess] :account_shared_access 
  # @return [AccountSharedAccess]
  describe 'update_shared_access test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
