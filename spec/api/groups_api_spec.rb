=begin
#DocuSign REST API

#The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.

OpenAPI spec version: v2
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::GroupsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GroupsApi' do
  before do
    # run before each test
    @instance = SwaggerClient::GroupsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GroupsApi' do
    it 'should create an instact of GroupsApi' do
      expect(@instance).to be_instance_of(SwaggerClient::GroupsApi)
    end
  end

  # unit tests for create_groups
  # Creates one or more groups for the account.
  # Creates one or more groups for the account.  Groups can be used to help manage users by associating users with a group. You can associate a group with a Permission Profile, which sets the user permissions for users in that group without having to set the &#x60;userSettings&#x60; property for each user. You are not required to set Permission Profiles for a group, but it makes it easier to manage user permissions for a large number of users. You can also use groups with template sharing to limit user access to templates.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [GroupInformation] :group_information 
  # @return [GroupInformation]
  describe 'create_groups test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_brands
  # Deletes brand information from the requested group.
  # Deletes brand information from the requested group.
  # @param account_id The external account number (int) or account ID Guid.
  # @param group_id The ID of the group being accessed.
  # @param [Hash] opts the optional parameters
  # @option opts [BrandsRequest] :brands_request 
  # @return [BrandsResponse]
  describe 'delete_brands test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_group_users
  # Deletes one or more users from a gro
  # Deletes one or more users from a group. 
  # @param account_id The external account number (int) or account ID Guid.
  # @param group_id The ID of the group being accessed.
  # @param [Hash] opts the optional parameters
  # @option opts [UserInfoList] :user_info_list 
  # @return [UsersResponse]
  describe 'delete_group_users test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_groups
  # Deletes an existing user group.
  # Deletes an existing user group.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [GroupInformation] :group_information 
  # @return [GroupInformation]
  describe 'delete_groups test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_brands
  # Gets group brand ID Information. 
  # Retrieves information about the brands associated with the requested group.
  # @param account_id The external account number (int) or account ID Guid.
  # @param group_id The ID of the group being accessed.
  # @param [Hash] opts the optional parameters
  # @return [BrandsResponse]
  describe 'get_brands test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_group_users
  # Gets a list of users in a group.
  # Retrieves a list of users in a group.
  # @param account_id The external account number (int) or account ID Guid.
  # @param group_id The ID of the group being accessed.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :count Number of records to return. The number must be greater than 1 and less than or equal to 100. 
  # @option opts [String] :start_position Starting value for the list.
  # @return [UsersResponse]
  describe 'list_group_users test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_groups
  # Gets information about groups associated with the account.
  # Retrieves information about groups associated with the account.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :count Number of records to return. The number must be greater than 1 and less than or equal to 100.
  # @option opts [String] :group_name Filters the groups returned by the group name or a sub-string of group name.
  # @option opts [String] :group_type 
  # @option opts [String] :search_text 
  # @option opts [String] :start_position Starting value for the list.
  # @return [GroupInformation]
  describe 'list_groups test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_brands
  # Adds group brand ID information to a group.
  # Adds group brand ID information to a group.
  # @param account_id The external account number (int) or account ID Guid.
  # @param group_id The ID of the group being accessed.
  # @param [Hash] opts the optional parameters
  # @option opts [BrandsRequest] :brands_request 
  # @return [BrandsResponse]
  describe 'update_brands test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_group_users
  # Adds one or more users to an existing group.
  # Adds one or more users to an existing group.
  # @param account_id The external account number (int) or account ID Guid.
  # @param group_id The ID of the group being accessed.
  # @param [Hash] opts the optional parameters
  # @option opts [UserInfoList] :user_info_list 
  # @return [UsersResponse]
  describe 'update_group_users test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_groups
  # Updates the group information for a group.
  # Updates the group name and modifies, or sets, the permission profile for the group.
  # @param account_id The external account number (int) or account ID Guid.
  # @param [Hash] opts the optional parameters
  # @option opts [GroupInformation] :group_information 
  # @return [GroupInformation]
  describe 'update_groups test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
